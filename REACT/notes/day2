Day 2

ES2015/ ES 6 version features

Traspiler: Babel / Tracuer

ES6 ==> babel/tracuer ==> ES5

Arrow function
function add(x, y) { return x + y; }

var add = (x, y) => { return x + y; }

OR

var add = (x,y) => x + y;

scope variables and constant [ let and const]
var g = 100; function doTask() { var a = 10; if( g > a) { let b = 20; // block scope c = 30; } console.log(g, a, b, c); // b is not visible here }

doTask(); console.log(g, a, b, c); // b is not visible here

--

const PI = 3.14159;

PI = 4.5; // error

template string literal
as of JS 5 we have 'data' or "data" for string literal

ES 6 introduced new string literal ``

var name ="Peter";

var msg = Welcome ${name}, JavaScript training

Destructuring
4.1) object let product = {"id":5,"name":"Samsung","price":68000.00,"category" : "tv"};

let {name, price} = product;

console.log(name , price);

old way: console.log(product.name , product.price);

4.2) array

let colors = ["red", "green", "blue", "pink", "orange"];

ES 5 way: let r = colors[0]; let g = colors[1];

ES 6 way:

let [r, g, b, ...others] = colors;

// r ==> red // b ==> blue // others ==> ["pink", "orange"]

clone
let product = {"id":5,"name":"Samsung","price":68000.00,"category" : "tv"};

let ref = product; // ref --> pointer

ref.price = 980000.00

clone:

let product = {"id":5,"name":"Samsung","price":68000.00,"category" : "tv"};

let ref = {...product}; // clone ref.price = 980000.00

var data = [5,10,2,8,4,13,9];

var elems = [...data]; // clone

Promise API
Promises simplify deferred and asynchronous computations. A promise represents an operation that hasn't completed yet.

pending
fulfilled / resolved
rejected
Synchronous call:

let res = doTask(); console.log("done"); // blocked

ASynchronous call: assume doTask() is async code

doTask().then( (res) => console.log(res), // resolved (err) => console.log(err) // rejected );

console.log("other tasks"); // not blocked

async/await
  async function getData() {
            let response = await fetch("https://jsonplaceholder.typicode.com/users");
            let data = await response.json();
            console.log(data);
        }

        getData()